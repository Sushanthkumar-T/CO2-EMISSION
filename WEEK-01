{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9vzGMWJz_Xrr"
      },
      "outputs": [],
      "source": [
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "import kagglehub\n",
        "bhuviranga_co2_emissions_path = kagglehub.dataset_download('bhuviranga/co2-emissions')\n",
        "\n",
        "print('Data source import complete.')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0wJ3cHtu_Xrw"
      },
      "source": [
        "### Learning Regression Analysis Notebook\n",
        "#### This notebook is dedicated to learning. Feel free to provide feedback for improvement.\n",
        "\n",
        "#### it is not done yet i will update."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:31.619162Z",
          "iopub.status.busy": "2023-08-16T09:34:31.617931Z",
          "iopub.status.idle": "2023-08-16T09:34:31.626571Z",
          "shell.execute_reply": "2023-08-16T09:34:31.625693Z",
          "shell.execute_reply.started": "2023-08-16T09:34:31.619121Z"
        },
        "id": "fdscwTki_Xr0",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "import os\n",
        "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:31.629217Z",
          "iopub.status.busy": "2023-08-16T09:34:31.628307Z",
          "iopub.status.idle": "2023-08-16T09:34:31.637482Z",
          "shell.execute_reply": "2023-08-16T09:34:31.636346Z",
          "shell.execute_reply.started": "2023-08-16T09:34:31.629174Z"
        },
        "id": "_OHf9aec_Xr1",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "id": "CckI5UFx_Xr2"
      },
      "source": [
        "### Fuel Consumption City (L/100 km): This refers to the amount of fuel, measured in liters, that a vehicle consumes per 100 kilometers of driving under city or urban conditions.\n",
        "\n",
        "### Fuel Consumption Hwy (L/100 km): This represents the amount of fuel, measured in liters, that a vehicle consumes per 100 kilometers of driving on highways or open roads.\n",
        "\n",
        "### Fuel Consumption Comb (L/100 km): This metric represents the combined fuel consumption of a vehicle, measured in liters, per 100 kilometers of driving. Unlike the individual \"City\" and \"Hwy\" measurements, the \"Comb\" value takes into account a mix of both city and highway driving conditions. It provides an average fuel efficiency figure that considers the vehicle's performance across various scenarios.\n",
        "\n",
        "### Fuel Consumption Comb (mpg): This metric is an alternative representation of the combined fuel consumption, measured in miles per gallon. Unlike the L/100 km unit, which measures fuel consumption (lower values are better), mpg (miles per gallon) measures fuel efficiency (higher values are better). A higher mpg value indicates that the vehicle can travel more miles using a fixed amount of fuel.\n",
        "\n",
        "### engine size (measured in liters) is a significant factor in determining a vehicle's power, performance, fuel efficiency, and emissions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:31.638969Z",
          "iopub.status.busy": "2023-08-16T09:34:31.638669Z",
          "iopub.status.idle": "2023-08-16T09:34:31.680185Z",
          "shell.execute_reply": "2023-08-16T09:34:31.678888Z",
          "shell.execute_reply.started": "2023-08-16T09:34:31.638943Z"
        },
        "id": "M-apC22s_Xr3",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv(\"/kaggle/input/co2-emissions/CO2 Emissions.csv\")\n",
        "df1 = df.copy()  # this dataframe for pca\n",
        "df2 = df.copy()  # this dataframe for subsetting\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:31.684129Z",
          "iopub.status.busy": "2023-08-16T09:34:31.683005Z",
          "iopub.status.idle": "2023-08-16T09:34:31.692377Z",
          "shell.execute_reply": "2023-08-16T09:34:31.691218Z",
          "shell.execute_reply.started": "2023-08-16T09:34:31.684085Z"
        },
        "id": "SwVx-ROT_Xr4",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:31.693857Z",
          "iopub.status.busy": "2023-08-16T09:34:31.693553Z",
          "iopub.status.idle": "2023-08-16T09:34:31.717244Z",
          "shell.execute_reply": "2023-08-16T09:34:31.716093Z",
          "shell.execute_reply.started": "2023-08-16T09:34:31.69383Z"
        },
        "id": "rYfxqwof_Xr5",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:31.719107Z",
          "iopub.status.busy": "2023-08-16T09:34:31.718401Z",
          "iopub.status.idle": "2023-08-16T09:34:31.752738Z",
          "shell.execute_reply": "2023-08-16T09:34:31.751793Z",
          "shell.execute_reply.started": "2023-08-16T09:34:31.719075Z"
        },
        "id": "occRZU_6_Xr6",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:31.754936Z",
          "iopub.status.busy": "2023-08-16T09:34:31.754256Z",
          "iopub.status.idle": "2023-08-16T09:34:31.770508Z",
          "shell.execute_reply": "2023-08-16T09:34:31.769334Z",
          "shell.execute_reply.started": "2023-08-16T09:34:31.754889Z"
        },
        "id": "-2KKE7o5_Xr7",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "df.isnull().sum().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_kg_hide-input": true,
        "_kg_hide-output": true,
        "id": "yc3Z5hxs_Xr8"
      },
      "source": [
        "## moderately right-skewed, indicating that while there might be some asymmetry in the data, it's not significantly deviating from a symmetric distribution. In practical terms, this means that there might be a few larger values that extend the tail to the right, but the majority of the data is still clustered around the center."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:31.774077Z",
          "iopub.status.busy": "2023-08-16T09:34:31.771958Z",
          "iopub.status.idle": "2023-08-16T09:34:32.001746Z",
          "shell.execute_reply": "2023-08-16T09:34:32.000577Z",
          "shell.execute_reply.started": "2023-08-16T09:34:31.774029Z"
        },
        "id": "r8s8X4nF_Xr8",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize = (5,5))\n",
        "plt.hist(df['CO2 Emissions(g/km)'],edgecolor=\"white\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:32.005696Z",
          "iopub.status.busy": "2023-08-16T09:34:32.005323Z",
          "iopub.status.idle": "2023-08-16T09:34:32.012898Z",
          "shell.execute_reply": "2023-08-16T09:34:32.0117Z",
          "shell.execute_reply.started": "2023-08-16T09:34:32.005664Z"
        },
        "id": "vqqBhLvA_Xr9",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "from scipy.stats import skew\n",
        "print(skew(df['CO2 Emissions(g/km)']))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:32.014845Z",
          "iopub.status.busy": "2023-08-16T09:34:32.014545Z",
          "iopub.status.idle": "2023-08-16T09:34:32.278932Z",
          "shell.execute_reply": "2023-08-16T09:34:32.277688Z",
          "shell.execute_reply.started": "2023-08-16T09:34:32.014819Z"
        },
        "id": "h8cBfKO6_Xr-",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "import statsmodels.api as sm\n",
        "from scipy.stats import norm\n",
        "\n",
        "data = df['CO2 Emissions(g/km)']\n",
        "\n",
        "# Create a Q-Q plot\n",
        "sm.qqplot(data, line='s', dist=norm, fit=True)\n",
        "plt.title(\"Q-Q Plot\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:32.281261Z",
          "iopub.status.busy": "2023-08-16T09:34:32.280842Z",
          "iopub.status.idle": "2023-08-16T09:34:32.74286Z",
          "shell.execute_reply": "2023-08-16T09:34:32.742021Z",
          "shell.execute_reply.started": "2023-08-16T09:34:32.281222Z"
        },
        "id": "A_39ynHJ_Xr_",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "Make =df['Make'].unique()\n",
        "count = df['Make'].value_counts()\n",
        "\n",
        "plt.bar(Make,count)\n",
        "plt.xlabel('Make')\n",
        "plt.ylabel('Frequency')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:32.745107Z",
          "iopub.status.busy": "2023-08-16T09:34:32.744224Z",
          "iopub.status.idle": "2023-08-16T09:34:32.752722Z",
          "shell.execute_reply": "2023-08-16T09:34:32.751573Z",
          "shell.execute_reply.started": "2023-08-16T09:34:32.745073Z"
        },
        "id": "r8m1x3cN_Xr_",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "len(df['Model'].unique())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:32.754455Z",
          "iopub.status.busy": "2023-08-16T09:34:32.754084Z",
          "iopub.status.idle": "2023-08-16T09:34:33.058135Z",
          "shell.execute_reply": "2023-08-16T09:34:33.057045Z",
          "shell.execute_reply.started": "2023-08-16T09:34:32.754424Z"
        },
        "id": "qG8eXkKN_Xr_",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "Make =df['Vehicle Class'].unique()\n",
        "count = df['Vehicle Class'].value_counts()\n",
        "\n",
        "plt.bar(Make,count)\n",
        "plt.xlabel('Vehicle Class')\n",
        "plt.ylabel('Frequency')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:33.059974Z",
          "iopub.status.busy": "2023-08-16T09:34:33.059642Z",
          "iopub.status.idle": "2023-08-16T09:34:33.407325Z",
          "shell.execute_reply": "2023-08-16T09:34:33.405964Z",
          "shell.execute_reply.started": "2023-08-16T09:34:33.059945Z"
        },
        "id": "ZjYEGAaJ_Xr_",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "Make =df['Transmission'].unique()\n",
        "count = df['Transmission'].value_counts()\n",
        "\n",
        "plt.bar(Make,count)\n",
        "plt.xlabel('Transmission')\n",
        "plt.ylabel('Frequency')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:33.409208Z",
          "iopub.status.busy": "2023-08-16T09:34:33.40883Z",
          "iopub.status.idle": "2023-08-16T09:34:33.618357Z",
          "shell.execute_reply": "2023-08-16T09:34:33.617215Z",
          "shell.execute_reply.started": "2023-08-16T09:34:33.409177Z"
        },
        "id": "BjUY4c6o_XsA",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "Make =df['Fuel Type'].unique()\n",
        "count = df['Fuel Type'].value_counts()\n",
        "\n",
        "plt.bar(Make,count)\n",
        "plt.xlabel('Fuel Type')\n",
        "plt.ylabel('Frequency')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:33.620225Z",
          "iopub.status.busy": "2023-08-16T09:34:33.619855Z",
          "iopub.status.idle": "2023-08-16T09:34:33.853004Z",
          "shell.execute_reply": "2023-08-16T09:34:33.851851Z",
          "shell.execute_reply.started": "2023-08-16T09:34:33.620192Z"
        },
        "id": "POqHOwnG_XsA",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "Make =df['Cylinders'].unique()\n",
        "count = df['Cylinders'].value_counts()\n",
        "\n",
        "plt.bar(Make,count)\n",
        "plt.xlabel('Cylinders')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NjySIUOr_XsA"
      },
      "source": [
        "## Histogram analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:33.854865Z",
          "iopub.status.busy": "2023-08-16T09:34:33.854445Z",
          "iopub.status.idle": "2023-08-16T09:34:34.098471Z",
          "shell.execute_reply": "2023-08-16T09:34:34.097672Z",
          "shell.execute_reply.started": "2023-08-16T09:34:33.854824Z"
        },
        "id": "GNUFvV1H_XsB",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize = (5,5))\n",
        "plt.xlabel('Engine Size(L)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.hist(df['Engine Size(L)'],edgecolor=\"white\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:34.100551Z",
          "iopub.status.busy": "2023-08-16T09:34:34.09968Z",
          "iopub.status.idle": "2023-08-16T09:34:34.324735Z",
          "shell.execute_reply": "2023-08-16T09:34:34.323588Z",
          "shell.execute_reply.started": "2023-08-16T09:34:34.100514Z"
        },
        "id": "4sPg3Pox_XsB",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize = (5,5))\n",
        "plt.xlabel('Fuel Consumption City (L/100 km)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.hist(df['Fuel Consumption City (L/100 km)'],edgecolor=\"white\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:34.326495Z",
          "iopub.status.busy": "2023-08-16T09:34:34.326058Z",
          "iopub.status.idle": "2023-08-16T09:34:34.556406Z",
          "shell.execute_reply": "2023-08-16T09:34:34.555315Z",
          "shell.execute_reply.started": "2023-08-16T09:34:34.326452Z"
        },
        "id": "EKmKg3WI_XsB",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize = (5,5))\n",
        "plt.xlabel('Fuel Consumption Hwy (L/100 km)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.hist(df['Fuel Consumption Hwy (L/100 km)'],edgecolor=\"white\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:34.55797Z",
          "iopub.status.busy": "2023-08-16T09:34:34.557679Z",
          "iopub.status.idle": "2023-08-16T09:34:34.778594Z",
          "shell.execute_reply": "2023-08-16T09:34:34.777471Z",
          "shell.execute_reply.started": "2023-08-16T09:34:34.557944Z"
        },
        "id": "3TfZzrgb_XsB",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize = (5,5))\n",
        "plt.xlabel('Fuel Consumption Comb (L/100 km)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.hist(df['Fuel Consumption Comb (L/100 km)'],edgecolor=\"white\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:34.780431Z",
          "iopub.status.busy": "2023-08-16T09:34:34.780073Z",
          "iopub.status.idle": "2023-08-16T09:34:35.010163Z",
          "shell.execute_reply": "2023-08-16T09:34:35.008524Z",
          "shell.execute_reply.started": "2023-08-16T09:34:34.7804Z"
        },
        "id": "8MCveqKz_XsB",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize = (5,5))\n",
        "plt.xlabel('Fuel Consumption Comb (mpg)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.hist(df['Fuel Consumption Comb (mpg)'],edgecolor=\"white\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QPY_-X9K_XsB"
      },
      "source": [
        "# Regression Analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TzEgZ298_XsC"
      },
      "source": [
        "## Linearity:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:35.012654Z",
          "iopub.status.busy": "2023-08-16T09:34:35.011939Z",
          "iopub.status.idle": "2023-08-16T09:34:35.018996Z",
          "shell.execute_reply": "2023-08-16T09:34:35.017913Z",
          "shell.execute_reply.started": "2023-08-16T09:34:35.012618Z"
        },
        "id": "nLIJq8lG_XsC",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "\"\"\"import seaborn as sns\n",
        "sns.pairplot(df, diag_kind='auto')      # By setting diag_kind to 'auto', Seaborn will automatically choose the appropriate type of plot for the diagonal\n",
        "                                        #  based on the data type of the variables\n",
        "plt.show()\"\"\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vmpOWv9s_XsC"
      },
      "source": [
        "The two trend of linear pattern shows some underlying factor not visible under scatterplot."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:35.020776Z",
          "iopub.status.busy": "2023-08-16T09:34:35.02034Z",
          "iopub.status.idle": "2023-08-16T09:34:35.330753Z",
          "shell.execute_reply": "2023-08-16T09:34:35.329727Z",
          "shell.execute_reply.started": "2023-08-16T09:34:35.020744Z"
        },
        "id": "u7nJydAT_XsC",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "sns.scatterplot(x=df['CO2 Emissions(g/km)'], y=df['Fuel Consumption City (L/100 km)'], color='blue', marker='o')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:35.337931Z",
          "iopub.status.busy": "2023-08-16T09:34:35.33756Z",
          "iopub.status.idle": "2023-08-16T09:34:35.642284Z",
          "shell.execute_reply": "2023-08-16T09:34:35.641065Z",
          "shell.execute_reply.started": "2023-08-16T09:34:35.3379Z"
        },
        "id": "HxurcIlD_XsD",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "sns.scatterplot(x=df['CO2 Emissions(g/km)'], y=df['Fuel Consumption Hwy (L/100 km)'], color='orange', marker='o')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:35.644156Z",
          "iopub.status.busy": "2023-08-16T09:34:35.643719Z",
          "iopub.status.idle": "2023-08-16T09:34:35.932163Z",
          "shell.execute_reply": "2023-08-16T09:34:35.931064Z",
          "shell.execute_reply.started": "2023-08-16T09:34:35.644114Z"
        },
        "id": "6DQzy057_XsD",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "sns.scatterplot(x=df['CO2 Emissions(g/km)'], y=df['Fuel Consumption Comb (L/100 km)'], color='red', marker='o')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:35.934133Z",
          "iopub.status.busy": "2023-08-16T09:34:35.93364Z",
          "iopub.status.idle": "2023-08-16T09:34:36.247414Z",
          "shell.execute_reply": "2023-08-16T09:34:36.24648Z",
          "shell.execute_reply.started": "2023-08-16T09:34:35.934093Z"
        },
        "id": "o6Z_Azx4_XsE",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "sns.scatterplot(x=np.log(df['CO2 Emissions(g/km)']), y=df['Fuel Consumption Comb (mpg)'], color='green', marker='o')\n",
        "#df['transformed CO2 Emissions(g/km)'] = np.log(df['CO2 Emissions(g/km)'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:36.249458Z",
          "iopub.status.busy": "2023-08-16T09:34:36.249101Z",
          "iopub.status.idle": "2023-08-16T09:34:36.548242Z",
          "shell.execute_reply": "2023-08-16T09:34:36.547357Z",
          "shell.execute_reply.started": "2023-08-16T09:34:36.249427Z"
        },
        "id": "5QSn-VtM_XsE",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "sns.scatterplot(x=df['CO2 Emissions(g/km)'], y=df['Engine Size(L)'], color='purple', marker='o')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ayZa8KX5_XsF"
      },
      "source": [
        "## Multicollinearity"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a-VBwQrT_XsF"
      },
      "source": [
        "###  the data have correlation coefficients above 0.75 between multiple pairs of independent variables, it suggests a strong multicollinearity issue."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:36.550139Z",
          "iopub.status.busy": "2023-08-16T09:34:36.549595Z",
          "iopub.status.idle": "2023-08-16T09:34:37.068774Z",
          "shell.execute_reply": "2023-08-16T09:34:37.067624Z",
          "shell.execute_reply.started": "2023-08-16T09:34:36.550106Z"
        },
        "id": "dAqT8VDn_XsF",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "correlation_matrix = df.corr(method='pearson', min_periods=1, numeric_only=True)\n",
        "plt.figure(figsize=(10,10))\n",
        "\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap=\"coolwarm\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O68Da4Qe_XsG"
      },
      "source": [
        "## Dummy varaiables (optional - only for multilinear)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.07392Z",
          "iopub.status.busy": "2023-08-16T09:34:37.072798Z",
          "iopub.status.idle": "2023-08-16T09:34:37.088742Z",
          "shell.execute_reply": "2023-08-16T09:34:37.086351Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.073871Z"
        },
        "id": "e0_XTTRt_XsQ",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "make_variables = pd.get_dummies(df['Make'], prefix='Make', drop_first=True) # dropfirst for dummyvariable trap\n",
        "df = pd.concat([df, make_variables], axis=1)\n",
        "df.drop(['Make'], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.091576Z",
          "iopub.status.busy": "2023-08-16T09:34:37.090181Z",
          "iopub.status.idle": "2023-08-16T09:34:37.105872Z",
          "shell.execute_reply": "2023-08-16T09:34:37.104474Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.091529Z"
        },
        "id": "fMWiny9J_XsR",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "vechicle_class_variables = pd.get_dummies(df['Vehicle Class'], prefix='Make', drop_first=True)\n",
        "df = pd.concat([df, vechicle_class_variables], axis=1)\n",
        "df.drop(['Vehicle Class'], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.108794Z",
          "iopub.status.busy": "2023-08-16T09:34:37.107732Z",
          "iopub.status.idle": "2023-08-16T09:34:37.123632Z",
          "shell.execute_reply": "2023-08-16T09:34:37.12246Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.108746Z"
        },
        "id": "VnqYzGPN_XsS",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "trans_variables = pd.get_dummies(df['Transmission'], prefix='Make', drop_first=True)\n",
        "df = pd.concat([df, trans_variables], axis=1)\n",
        "df.drop(['Transmission'], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.125521Z",
          "iopub.status.busy": "2023-08-16T09:34:37.125157Z",
          "iopub.status.idle": "2023-08-16T09:34:37.13659Z",
          "shell.execute_reply": "2023-08-16T09:34:37.135402Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.12549Z"
        },
        "id": "vabhsHwi_XsS",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "dum_variables = pd.get_dummies(df['Fuel Type'], prefix='Make', drop_first=True)\n",
        "df = pd.concat([df, dum_variables], axis=1)\n",
        "df.drop(['Fuel Type'], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.138565Z",
          "iopub.status.busy": "2023-08-16T09:34:37.138083Z",
          "iopub.status.idle": "2023-08-16T09:34:37.155463Z",
          "shell.execute_reply": "2023-08-16T09:34:37.154329Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.138521Z"
        },
        "id": "Zh_d_Xfq_XsS",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "dum_variables = pd.get_dummies(df['Cylinders'], prefix='Make', drop_first=True)\n",
        "df = pd.concat([df, dum_variables], axis=1)\n",
        "df.drop(['Cylinders'], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YSwz7Qy9_XsT"
      },
      "source": [
        "# first model - simple linear regression\n",
        "\n",
        "## choosing highly corelated variable"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.15738Z",
          "iopub.status.busy": "2023-08-16T09:34:37.157034Z",
          "iopub.status.idle": "2023-08-16T09:34:37.164306Z",
          "shell.execute_reply": "2023-08-16T09:34:37.163417Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.157344Z"
        },
        "id": "4tEHiGmb_XsT",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(df['Fuel Consumption Hwy (L/100 km)'], df['CO2 Emissions(g/km)'], test_size=0.2, random_state=43)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.166077Z",
          "iopub.status.busy": "2023-08-16T09:34:37.165772Z",
          "iopub.status.idle": "2023-08-16T09:34:37.181222Z",
          "shell.execute_reply": "2023-08-16T09:34:37.180098Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.166051Z"
        },
        "id": "DsBruFYR_XsT",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "import statsmodels.api as sm\n",
        "\n",
        "X = sm.add_constant(X_train)           # intercept\n",
        "y = y_train                            # dependent\n",
        "model = sm.OLS(y, X).fit()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_kg_hide-input": true,
        "_kg_hide-output": true,
        "id": "CTVXIdp2_XsT"
      },
      "source": [
        "### 1. r bar or r:  78.5% of the variance in CO2 emissions.\n",
        "\n",
        "### 2. A high F-statistic value (2.162e+04) suggests that the model as a whole is statistically significant.\n",
        "\n",
        "### 3. Associated p-value (Prob (F-statistic)) is very close to zero, indicating strong evidence against the null hypothesis that all coefficients are zero.\n",
        "\n",
        "###  4. Low p-values (typically below 0.05) indicate that a coefficient is statistically significant.\n",
        "\n",
        "### 5. Durbin-Watson: A test for autocorrelation in the residuals. A value around 2 suggests no significant autocorrelation.\n",
        "\n",
        "### 6. Jarque-Bera (JB), Prob(JB): A test for normality of residuals. Low p-value suggests that the residuals are not normally distributed. so the transormation should be applied for this"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_kg_hide-input": true,
        "_kg_hide-output": true,
        "id": "2MOZq0JA_XsT"
      },
      "source": [
        "The condition number (Cond. No.) is a measure of multicollinearity in a regression model.\n",
        "In your case, a condition number of 39.3 suggests that there might be some degree of multicollinearity in your regression model. While there's no strict threshold for what constitutes a \"high\" condition number, a value much larger than 1 can be indicative of multicollinearity.\n",
        "f you have only one independent variable (feature) and you're still observing a relatively high condition number, it might indicate that there's some instability in your regression model. In the case of a single independent variable, multicollinearity isn't directly relevant since there are no other variables to be correlated with.\n",
        "\n",
        "## condition_number = np.sqrt(np.max(eigenvalues) / np.min(eigenvalues))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.183491Z",
          "iopub.status.busy": "2023-08-16T09:34:37.183111Z",
          "iopub.status.idle": "2023-08-16T09:34:37.212184Z",
          "shell.execute_reply": "2023-08-16T09:34:37.210976Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.183458Z"
        },
        "id": "8-Hybblt_XsU",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "print(model.summary())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_kg_hide-input": true,
        "_kg_hide-output": true,
        "id": "krLrP9N4_XsU"
      },
      "source": [
        "Jarque-Bera (JB): The JB statistic is a measure of the skewness and kurtosis of the residuals. A higher JB statistic indicates departures from normality. In your case, the JB statistic is quite high, suggesting potential non-normality in the distribution of residuals.\n",
        "\n",
        "Prob(JB): The probability associated with the Jarque-Bera statistic. This p-value helps you determine whether the residuals follow a normal distribution. A low p-value (close to 0) suggests that you have evidence to reject the null hypothesis of normality, indicating that the residuals are not normally distributed.\n",
        "\n",
        "The combination of a high JB statistic and a very low p-value (0.00) suggests that the residuals of your regression model are not normally distributed. This could indicate that there might be some issue with the assumptions of the linear regression model.\n",
        "\n",
        "The Jarque-Bera test is based on the skewness and kurtosis of the residuals. Skewness measures the asymmetry of the distribution, and kurtosis measures the \"tailedness\" or peakedness of the distribution.\n",
        "\n",
        "The Jarque-Bera test statistic is calculated using the following formula:\n",
        "\n",
        "## JB = (n / 6) * (skewness^2 + 0.25 * (kurtosis - 3)^2)\n",
        "\n",
        "Where:\n",
        "\n",
        "n is the number of observations.\n",
        "skewness is the skewness of the residuals.\n",
        "kurtosis is the kurtosis of the residuals.\n",
        "The Jarque-Bera test statistic follows a chi-squared distribution with 2 degrees of freedom under the null hypothesis of normality.\n",
        "\n",
        "The p-value associated with the Jarque-Bera statistic is then calculated based on the chi-squared distribution. A low p-value suggests that the observed Jarque-Bera statistic is significantly different from what would be expected under a normal distribution. This prompts you to reject the null hypothesis of normality."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.214557Z",
          "iopub.status.busy": "2023-08-16T09:34:37.213802Z",
          "iopub.status.idle": "2023-08-16T09:34:37.225038Z",
          "shell.execute_reply": "2023-08-16T09:34:37.223817Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.214505Z"
        },
        "id": "h2yp1yA4_XsU",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "X_test_const = sm.add_constant(X_test)\n",
        "y_pred = model.predict(X_test_const)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PIj2jFaJ_XsU"
      },
      "source": [
        "MAE says that on average, the predictions deviate from the actual values by around 18.24 units."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.227961Z",
          "iopub.status.busy": "2023-08-16T09:34:37.227024Z",
          "iopub.status.idle": "2023-08-16T09:34:37.240772Z",
          "shell.execute_reply": "2023-08-16T09:34:37.239588Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.227906Z"
        },
        "id": "nGGoIBTC_XsU",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "print(\"Mean Absolute Error:\", mae)\n",
        "\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print(\"Mean Squared Error:\", mse)\n",
        "\n",
        "rmse = np.sqrt(mse)\n",
        "print(\"Root Mean Squared Error:\", rmse)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QVIg3r4l_XsV"
      },
      "source": [
        "##  Residual analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uy1IJj36_XsV"
      },
      "source": [
        "There is no clear patterns which is good"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.243473Z",
          "iopub.status.busy": "2023-08-16T09:34:37.242728Z",
          "iopub.status.idle": "2023-08-16T09:34:37.501496Z",
          "shell.execute_reply": "2023-08-16T09:34:37.50036Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.243429Z"
        },
        "id": "Uv6MnuoJ_XsV",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "residuals = y_test - y_pred\n",
        "sns.scatterplot(x=residuals, y=y_pred, color='olive', marker='o')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rZAPNBpy_XsV"
      },
      "source": [
        "There is no normality in residuals, which violates the assumption."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.503707Z",
          "iopub.status.busy": "2023-08-16T09:34:37.502946Z",
          "iopub.status.idle": "2023-08-16T09:34:37.747989Z",
          "shell.execute_reply": "2023-08-16T09:34:37.746754Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.503669Z"
        },
        "id": "1DbLY27V_XsW",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(residuals, bins=20, edgecolor='black', alpha=0.7, density=True)\n",
        "plt.xlabel(\"Residuals\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.title(\"Histogram of Residuals\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OYD9jnfp_XsW"
      },
      "source": [
        "There are some outliers."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.749757Z",
          "iopub.status.busy": "2023-08-16T09:34:37.749423Z",
          "iopub.status.idle": "2023-08-16T09:34:37.977597Z",
          "shell.execute_reply": "2023-08-16T09:34:37.976618Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.749728Z"
        },
        "id": "9NSuB8MM_XsW",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "import scipy.stats as stats\n",
        "\n",
        "plt.figure(figsize=(8,8))\n",
        "stats.probplot(residuals, dist=\"norm\", plot=plt)\n",
        "plt.title(\"Q-Q Plot of Residuals\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0dmzRJp__XsW"
      },
      "source": [
        "### checking for outliers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:37.979622Z",
          "iopub.status.busy": "2023-08-16T09:34:37.979023Z",
          "iopub.status.idle": "2023-08-16T09:34:38.116226Z",
          "shell.execute_reply": "2023-08-16T09:34:38.115105Z",
          "shell.execute_reply.started": "2023-08-16T09:34:37.979589Z"
        },
        "id": "VhC_tuVG_XsW",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.boxplot(df['CO2 Emissions(g/km)']);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:38.118551Z",
          "iopub.status.busy": "2023-08-16T09:34:38.117873Z",
          "iopub.status.idle": "2023-08-16T09:34:38.272637Z",
          "shell.execute_reply": "2023-08-16T09:34:38.271489Z",
          "shell.execute_reply.started": "2023-08-16T09:34:38.118512Z"
        },
        "id": "vFI-5jtC_XsX",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.boxplot(df['Fuel Consumption Hwy (L/100 km)']);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:38.274968Z",
          "iopub.status.busy": "2023-08-16T09:34:38.274306Z",
          "iopub.status.idle": "2023-08-16T09:34:38.288246Z",
          "shell.execute_reply": "2023-08-16T09:34:38.28713Z",
          "shell.execute_reply.started": "2023-08-16T09:34:38.274925Z"
        },
        "id": "CbiHBUsc_XsX",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "dfsub = df[(df['CO2 Emissions(g/km)'] < 400) & (df['Fuel Consumption Hwy (L/100 km)'] < 15.0)]\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cxb12sz5_XsX"
      },
      "source": [
        "#### After removing outliers, the adj.r square of the model is better."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:38.29001Z",
          "iopub.status.busy": "2023-08-16T09:34:38.28966Z",
          "iopub.status.idle": "2023-08-16T09:34:38.322235Z",
          "shell.execute_reply": "2023-08-16T09:34:38.32106Z",
          "shell.execute_reply.started": "2023-08-16T09:34:38.289978Z"
        },
        "id": "WSO6GkHN_XsX",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(dfsub['Fuel Consumption Hwy (L/100 km)'], dfsub['CO2 Emissions(g/km)'], test_size=0.2, random_state=43)\n",
        "X = sm.add_constant(X_train)\n",
        "y = y_train\n",
        "model = sm.OLS(y, X).fit()\n",
        "print(model.summary())\n",
        "\n",
        "X_test_const = sm.add_constant(X_test)\n",
        "y_pred = model.predict(X_test_const)\n",
        "\n",
        "residual  = y_test - y_pred"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_0Wc99di_XsX"
      },
      "source": [
        "Still, the normality of residuals are still not normally distributed after removing outliers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:38.324915Z",
          "iopub.status.busy": "2023-08-16T09:34:38.324121Z",
          "iopub.status.idle": "2023-08-16T09:34:38.591002Z",
          "shell.execute_reply": "2023-08-16T09:34:38.589838Z",
          "shell.execute_reply.started": "2023-08-16T09:34:38.324868Z"
        },
        "id": "YG8CW-60_XsX",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "import scipy.stats as stats\n",
        "\n",
        "plt.figure(figsize=(8, 8))\n",
        "stats.probplot(residual, dist=\"norm\", plot=plt)\n",
        "plt.title(\"Q-Q Plot of Residuals\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wljARLyK_XsY"
      },
      "source": [
        "#### applying transoformation to see whether the problem gets solved"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6LQaUuvz_XsY"
      },
      "source": [
        "#### The adjusted r square is 0.84 which is better after transforming both variables."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:38.59338Z",
          "iopub.status.busy": "2023-08-16T09:34:38.592909Z",
          "iopub.status.idle": "2023-08-16T09:34:38.624202Z",
          "shell.execute_reply": "2023-08-16T09:34:38.622897Z",
          "shell.execute_reply.started": "2023-08-16T09:34:38.593336Z"
        },
        "id": "iSf-bqnA_XsY",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(np.log(dfsub['Fuel Consumption Hwy (L/100 km)']), np.log(dfsub['CO2 Emissions(g/km)']), test_size=0.2, random_state=43)\n",
        "X = sm.add_constant(X_train)\n",
        "y = y_train\n",
        "model = sm.OLS(y, X).fit()\n",
        "print(model.summary())\n",
        "\n",
        "X_test_const = sm.add_constant(X_test)\n",
        "y_pred = model.predict(X_test_const)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n640dZdI_XsY"
      },
      "source": [
        "Still, the tails are not following the normality."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:38.626479Z",
          "iopub.status.busy": "2023-08-16T09:34:38.626039Z",
          "iopub.status.idle": "2023-08-16T09:34:38.922622Z",
          "shell.execute_reply": "2023-08-16T09:34:38.921366Z",
          "shell.execute_reply.started": "2023-08-16T09:34:38.626437Z"
        },
        "id": "YgUB2n_M_XsY",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "residual  = y_test - y_pred\n",
        "\n",
        "plt.figure(figsize=(8,8))\n",
        "stats.probplot(residual, dist=\"norm\", plot=plt)\n",
        "plt.title(\"Q-Q Plot of Residuals\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:38.925806Z",
          "iopub.status.busy": "2023-08-16T09:34:38.925352Z",
          "iopub.status.idle": "2023-08-16T09:34:39.214433Z",
          "shell.execute_reply": "2023-08-16T09:34:39.213325Z",
          "shell.execute_reply.started": "2023-08-16T09:34:38.925755Z"
        },
        "id": "g41i8obs_XsZ",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(residual, bins=20, edgecolor='black', alpha=0.7, density=True)\n",
        "plt.xlabel(\"Residuals\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.title(\"Histogram of Residuals\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vhEzlHjf_XsZ"
      },
      "source": [
        "### Residual vs. Independent"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5YLvHX9X_XsZ"
      },
      "source": [
        "assumption of homoscedasticity (constant variance of residuals)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.216364Z",
          "iopub.status.busy": "2023-08-16T09:34:39.216003Z",
          "iopub.status.idle": "2023-08-16T09:34:39.223519Z",
          "shell.execute_reply": "2023-08-16T09:34:39.222408Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.216332Z"
        },
        "id": "8cu0sUyA_XsZ",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "len(y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.225625Z",
          "iopub.status.busy": "2023-08-16T09:34:39.225136Z",
          "iopub.status.idle": "2023-08-16T09:34:39.237512Z",
          "shell.execute_reply": "2023-08-16T09:34:39.236327Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.225581Z"
        },
        "id": "JbxhRmS0_XsZ",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "len(residual)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_kg_hide-input": true,
        "id": "mdZBBIWs_Xsa"
      },
      "source": [
        "Interpreting the plot:\n",
        "\n",
        "If the spread of residuals remains roughly constant across different fitted values, the assumption of homoscedasticity is likely met.\n",
        "If the spread of residuals widens or narrows systematically as the fitted values increase or decrease, this indicates heteroscedasticity (violation of the assumption).\n",
        "That is if you see any funnel shape then strongly there is heteroscedasticity.\n",
        "\n",
        "In our case, it is roughly constant.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.239454Z",
          "iopub.status.busy": "2023-08-16T09:34:39.239038Z",
          "iopub.status.idle": "2023-08-16T09:34:39.517986Z",
          "shell.execute_reply": "2023-08-16T09:34:39.516818Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.239408Z"
        },
        "id": "soxlPUk8_Xsa",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.scatter(y_pred, residual)\n",
        "plt.axhline(y=0, color='r', linestyle='--')  # Add a reference line at y=0\n",
        "plt.xlabel('Fitted Values')\n",
        "plt.ylabel('Residuals')\n",
        "plt.title('Residuals vs. Fitted Values (Homoscedasticity Plot)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2pvB4TbF_Xsa"
      },
      "source": [
        "Although, we got 0.83 adj.r square and assumptions are roughly true. We go for any other models."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bV3fhNZQ_Xsa"
      },
      "source": [
        "# Multiple linear regression ( taking all the features to see difference)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.520453Z",
          "iopub.status.busy": "2023-08-16T09:34:39.519522Z",
          "iopub.status.idle": "2023-08-16T09:34:39.526974Z",
          "shell.execute_reply": "2023-08-16T09:34:39.525873Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.52041Z"
        },
        "id": "qSlkcQGO_Xsa",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "df.drop('Model',axis=1,inplace = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.528805Z",
          "iopub.status.busy": "2023-08-16T09:34:39.528332Z",
          "iopub.status.idle": "2023-08-16T09:34:39.541403Z",
          "shell.execute_reply": "2023-08-16T09:34:39.540309Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.528777Z"
        },
        "id": "UUAPgbUq_Xsa",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.543128Z",
          "iopub.status.busy": "2023-08-16T09:34:39.542789Z",
          "iopub.status.idle": "2023-08-16T09:34:39.554977Z",
          "shell.execute_reply": "2023-08-16T09:34:39.554163Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.543089Z"
        },
        "id": "rNu0wZfI_Xsb",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "X = df.drop('CO2 Emissions(g/km)',axis = 1)\n",
        "y = df['CO2 Emissions(g/km)']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.556704Z",
          "iopub.status.busy": "2023-08-16T09:34:39.555979Z",
          "iopub.status.idle": "2023-08-16T09:34:39.576333Z",
          "shell.execute_reply": "2023-08-16T09:34:39.57523Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.556672Z"
        },
        "id": "f-bAmIAn_Xsb",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.577846Z",
          "iopub.status.busy": "2023-08-16T09:34:39.577441Z",
          "iopub.status.idle": "2023-08-16T09:34:39.585465Z",
          "shell.execute_reply": "2023-08-16T09:34:39.58433Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.577808Z"
        },
        "id": "74v6hJZq_Xsb",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "X_test.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DkO3Oz4x_Xsb"
      },
      "source": [
        "We know we have mulitcollinearity, but the adjust r2 is 0.99 which means there must me overfitting."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.58736Z",
          "iopub.status.busy": "2023-08-16T09:34:39.586927Z",
          "iopub.status.idle": "2023-08-16T09:34:39.646014Z",
          "shell.execute_reply": "2023-08-16T09:34:39.643121Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.587318Z"
        },
        "id": "nrLqm9dJ_Xsc",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "n = X_test.shape[0]  # Number of samples in the testing set\n",
        "p = X_test.shape[1]  # Number of features\n",
        "adj_r2 = 1 - ((1 - r2) * (n - 1)) / (n - p - 1)\n",
        "\n",
        "print(f\"R-squared: {r2}\")\n",
        "print(f\"Adjusted R-squared: {adj_r2}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LdABd_iS_Xsc"
      },
      "source": [
        "Although overfitting, the residuals are normally distributed than simple linear regression. but how?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.648282Z",
          "iopub.status.busy": "2023-08-16T09:34:39.64771Z",
          "iopub.status.idle": "2023-08-16T09:34:39.974922Z",
          "shell.execute_reply": "2023-08-16T09:34:39.973863Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.648223Z"
        },
        "id": "ktsbNtQF_Xsc",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "residuals = y_test - y_pred\n",
        "\n",
        "plt.scatter(y_pred, residuals, c='olive',edgecolors ='black')\n",
        "plt.axhline(y=0, color='red', linestyle='--')\n",
        "plt.title(\"Residuals vs. Fitted Values\")\n",
        "plt.xlabel(\"Fitted Values\")\n",
        "plt.ylabel(\"Residuals\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:39.976818Z",
          "iopub.status.busy": "2023-08-16T09:34:39.9764Z",
          "iopub.status.idle": "2023-08-16T09:34:40.281161Z",
          "shell.execute_reply": "2023-08-16T09:34:40.280334Z",
          "shell.execute_reply.started": "2023-08-16T09:34:39.976777Z"
        },
        "id": "tbtdtwTI_Xsc",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(8,8))\n",
        "plt.hist(residuals, bins=20, edgecolor='black', alpha=0.7, density=True)\n",
        "plt.xlabel(\"Residuals\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.title(\"Histogram of Residuals\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:40.283236Z",
          "iopub.status.busy": "2023-08-16T09:34:40.282491Z",
          "iopub.status.idle": "2023-08-16T09:34:40.573406Z",
          "shell.execute_reply": "2023-08-16T09:34:40.572321Z",
          "shell.execute_reply.started": "2023-08-16T09:34:40.283192Z"
        },
        "id": "PEbBuNAl_Xsc",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(8,8))\n",
        "stats.probplot(residuals, dist=\"norm\", plot=plt)\n",
        "plt.title(\"Q-Q Plot of Residuals\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J62wU6zF_Xsc"
      },
      "source": [
        "We can do regularization techniques like lasso or ridge regression, or Huber regression, for this or we can also do pca to reduce the impact of multicolinearity."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lTbmoUXd_Xsd"
      },
      "source": [
        "# PCA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:40.57492Z",
          "iopub.status.busy": "2023-08-16T09:34:40.574624Z",
          "iopub.status.idle": "2023-08-16T09:34:40.582114Z",
          "shell.execute_reply": "2023-08-16T09:34:40.581154Z",
          "shell.execute_reply.started": "2023-08-16T09:34:40.574892Z"
        },
        "id": "qWjVDHRY_Xsd",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "df1.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:40.5841Z",
          "iopub.status.busy": "2023-08-16T09:34:40.583574Z",
          "iopub.status.idle": "2023-08-16T09:34:40.594839Z",
          "shell.execute_reply": "2023-08-16T09:34:40.593824Z",
          "shell.execute_reply.started": "2023-08-16T09:34:40.58407Z"
        },
        "id": "id_R0O6-_Xsd",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "df1.drop(['Make', 'Model', 'Vehicle Class', 'Engine Size(L)', 'Cylinders',\n",
        "       'Transmission', 'Fuel Type','CO2 Emissions(g/km)'],axis = 1,inplace = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:40.596787Z",
          "iopub.status.busy": "2023-08-16T09:34:40.596234Z",
          "iopub.status.idle": "2023-08-16T09:34:40.605885Z",
          "shell.execute_reply": "2023-08-16T09:34:40.604886Z",
          "shell.execute_reply.started": "2023-08-16T09:34:40.596756Z"
        },
        "id": "T0HqM43b_Xsd",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "X = df1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:40.607498Z",
          "iopub.status.busy": "2023-08-16T09:34:40.60717Z",
          "iopub.status.idle": "2023-08-16T09:34:40.622034Z",
          "shell.execute_reply": "2023-08-16T09:34:40.621011Z",
          "shell.execute_reply.started": "2023-08-16T09:34:40.60747Z"
        },
        "id": "dx3viTlQ_Xsd",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:40.624101Z",
          "iopub.status.busy": "2023-08-16T09:34:40.623747Z",
          "iopub.status.idle": "2023-08-16T09:34:40.651938Z",
          "shell.execute_reply": "2023-08-16T09:34:40.650651Z",
          "shell.execute_reply.started": "2023-08-16T09:34:40.62407Z"
        },
        "id": "dK5fGVpA_Xsd",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "from sklearn.decomposition import PCA\n",
        "\n",
        "pca = PCA(n_components=2)\n",
        "\n",
        "X_pca = pca.fit_transform(X_scaled)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:40.655748Z",
          "iopub.status.busy": "2023-08-16T09:34:40.654167Z",
          "iopub.status.idle": "2023-08-16T09:34:41.08399Z",
          "shell.execute_reply": "2023-08-16T09:34:41.082896Z",
          "shell.execute_reply.started": "2023-08-16T09:34:40.655704Z"
        },
        "id": "mda8NYCH_Xse",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(5,5))\n",
        "plt.scatter(X_pca[:, 0], X_pca[:, 1], alpha=0.6,color = 'orange',edgecolors = 'black')\n",
        "plt.title('PCA Transformed Data')\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "print(\"Explained variance ratio:\", pca.explained_variance_ratio_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:41.085911Z",
          "iopub.status.busy": "2023-08-16T09:34:41.085586Z",
          "iopub.status.idle": "2023-08-16T09:34:41.092812Z",
          "shell.execute_reply": "2023-08-16T09:34:41.091645Z",
          "shell.execute_reply.started": "2023-08-16T09:34:41.085875Z"
        },
        "id": "x6oc7by3_Xse",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "X = X_pca[:, 0]\n",
        "y = df['CO2 Emissions(g/km)']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:41.102787Z",
          "iopub.status.busy": "2023-08-16T09:34:41.102129Z",
          "iopub.status.idle": "2023-08-16T09:34:41.113586Z",
          "shell.execute_reply": "2023-08-16T09:34:41.112389Z",
          "shell.execute_reply.started": "2023-08-16T09:34:41.102749Z"
        },
        "id": "UoqtHqS7_Xse",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "model = LinearRegression()\n",
        "\n",
        "X_train = X_train.reshape(-1, 1)  # Reshape to 2D array\n",
        "X_test = X_test.reshape(-1, 1)    # Reshape to 2D array\n",
        "\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "n = X_test.shape[0]  # Number of samples in the testing set\n",
        "p = X_test.shape[1]  # Number of features\n",
        "adj_r2 = 1 - ((1 - r2) * (n - 1)) / (n - p - 1)\n",
        "\n",
        "print(f\"R-squared: {r2}\")\n",
        "print(f\"Adjusted R-squared: {adj_r2}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:41.115634Z",
          "iopub.status.busy": "2023-08-16T09:34:41.11524Z",
          "iopub.status.idle": "2023-08-16T09:34:41.381673Z",
          "shell.execute_reply": "2023-08-16T09:34:41.380536Z",
          "shell.execute_reply.started": "2023-08-16T09:34:41.115594Z"
        },
        "id": "hmlQc0FA_Xse",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "residuals = y_test - y_pred\n",
        "\n",
        "plt.scatter(y_pred, residuals, c='olive',edgecolors ='black')\n",
        "plt.axhline(y=0, color='red', linestyle='--')\n",
        "plt.title(\"Residuals vs. Fitted Values\")\n",
        "plt.xlabel(\"Fitted Values\")\n",
        "plt.ylabel(\"Residuals\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:34:41.384005Z",
          "iopub.status.busy": "2023-08-16T09:34:41.383017Z",
          "iopub.status.idle": "2023-08-16T09:34:41.585644Z",
          "shell.execute_reply": "2023-08-16T09:34:41.584537Z",
          "shell.execute_reply.started": "2023-08-16T09:34:41.383965Z"
        },
        "id": "48SNyuer_Xse",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(5,5))\n",
        "stats.probplot(residuals, dist=\"norm\", plot=plt)\n",
        "plt.title(\"Q-Q Plot of Residuals\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0y0WJnJq_Xsf"
      },
      "source": [
        "# Subsetting - to diagnose dual linear trend - eda"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-j0vd8N4_Xsf"
      },
      "source": [
        "### There is a problem with data than models since we observed dual linear trends on the dependent and independent variables."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_kg_hide-input": true,
        "id": "AaPymRdl_Xsf"
      },
      "source": [
        "#### Subsetting your dataset based on the categorical variable could be a very useful step in understanding the two distinct linear trends you're observing in your scatter plot. By breaking down your data into different groups based on this categorical variable, you might be able to uncover the factors that are driving these trends."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T09:48:35.052567Z",
          "iopub.status.busy": "2023-08-16T09:48:35.051915Z",
          "iopub.status.idle": "2023-08-16T09:48:35.069428Z",
          "shell.execute_reply": "2023-08-16T09:48:35.068335Z",
          "shell.execute_reply.started": "2023-08-16T09:48:35.052528Z"
        },
        "id": "3fdlBd-2_Xsf",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "df2.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T10:02:11.758367Z",
          "iopub.status.busy": "2023-08-16T10:02:11.757631Z",
          "iopub.status.idle": "2023-08-16T10:02:12.064257Z",
          "shell.execute_reply": "2023-08-16T10:02:12.063059Z",
          "shell.execute_reply.started": "2023-08-16T10:02:11.758329Z"
        },
        "id": "pyVotP6a_Xsf",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "class_ =df2['Vehicle Class'].unique()\n",
        "count = df2['Vehicle Class'].value_counts()\n",
        "\n",
        "plt.bar(class_,count)\n",
        "plt.xlabel('Vehicle Class')\n",
        "plt.ylabel('Frequency')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T10:02:33.12271Z",
          "iopub.status.busy": "2023-08-16T10:02:33.122309Z",
          "iopub.status.idle": "2023-08-16T10:02:33.145025Z",
          "shell.execute_reply": "2023-08-16T10:02:33.143769Z",
          "shell.execute_reply.started": "2023-08-16T10:02:33.122673Z"
        },
        "id": "LqZeaZ_B_Xsf",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "vehicle_class_subsets = {}\n",
        "\n",
        "for vehicle_class in class_:\n",
        "    subset = df2[df2['Vehicle Class'] == vehicle_class]\n",
        "    vehicle_class_subsets[vehicle_class] = subset\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T10:10:25.478445Z",
          "iopub.status.busy": "2023-08-16T10:10:25.47802Z",
          "iopub.status.idle": "2023-08-16T10:10:25.485841Z",
          "shell.execute_reply": "2023-08-16T10:10:25.484728Z",
          "shell.execute_reply.started": "2023-08-16T10:10:25.478408Z"
        },
        "id": "VszI6QRp_Xsg",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "vehicle_class_subsets.keys()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T10:28:21.953326Z",
          "iopub.status.busy": "2023-08-16T10:28:21.952188Z",
          "iopub.status.idle": "2023-08-16T10:28:21.95938Z",
          "shell.execute_reply": "2023-08-16T10:28:21.958245Z",
          "shell.execute_reply.started": "2023-08-16T10:28:21.953253Z"
        },
        "id": "2cTD_jlw_Xsg",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "compact_subset = vehicle_class_subsets['COMPACT']\n",
        "suv_small_subset = vehicle_class_subsets['SUV - SMALL']\n",
        "midsize_subset = vehicle_class_subsets['MID-SIZE']\n",
        "twoseater_subset = vehicle_class_subsets['TWO-SEATER']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tdsT-pvO_Xsg"
      },
      "source": [
        "There is a dual trend in first 3 of the subset classes. we need to find the hidden insights for that pattern"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T10:26:24.72231Z",
          "iopub.status.busy": "2023-08-16T10:26:24.721872Z",
          "iopub.status.idle": "2023-08-16T10:26:25.023847Z",
          "shell.execute_reply": "2023-08-16T10:26:25.022702Z",
          "shell.execute_reply.started": "2023-08-16T10:26:24.722252Z"
        },
        "id": "lK9r_x0e_Xsg",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "sns.scatterplot(x=compact_subset['CO2 Emissions(g/km)'], y=compact_subset['Fuel Consumption City (L/100 km)'], color='blue', marker='o')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T11:11:28.839911Z",
          "iopub.status.busy": "2023-08-16T11:11:28.839526Z",
          "iopub.status.idle": "2023-08-16T11:11:29.083412Z",
          "shell.execute_reply": "2023-08-16T11:11:29.081856Z",
          "shell.execute_reply.started": "2023-08-16T11:11:28.839881Z"
        },
        "id": "ZKOUP1gt_Xsg",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "class_ =compact_subset['Cylinders'].unique()\n",
        "count = compact_subset['Cylinders'].value_counts()\n",
        "\n",
        "plt.bar(class_,count)\n",
        "plt.xlabel('Cylinders')\n",
        "plt.ylabel('Frequency')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s8z6-Z90_Xsg"
      },
      "outputs": [],
      "source": [
        "compact_subset_sub = compact_subset[\n",
        "    (compact_subset['CO2 Emissions(g/km)'] > 150) & (compact_subset['CO2 Emissions(g/km)'] < 250) &\n",
        "    (compact_subset['Fuel Consumption City (L/100 km)'] > 10.0) & (compact_subset['Fuel Consumption City (L/100 km)'] < 17.5)\n",
        "]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T11:08:41.82768Z",
          "iopub.status.busy": "2023-08-16T11:08:41.827293Z",
          "iopub.status.idle": "2023-08-16T11:08:41.836068Z",
          "shell.execute_reply": "2023-08-16T11:08:41.834657Z",
          "shell.execute_reply.started": "2023-08-16T11:08:41.827649Z"
        },
        "id": "XCW9i-Oo_Xsh",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "compact_subset_sub.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2023-08-16T11:09:06.778653Z",
          "iopub.status.busy": "2023-08-16T11:09:06.777981Z",
          "iopub.status.idle": "2023-08-16T11:09:07.035615Z",
          "shell.execute_reply": "2023-08-16T11:09:07.034328Z",
          "shell.execute_reply.started": "2023-08-16T11:09:06.778616Z"
        },
        "id": "rVLwNln__Xsh",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "class_ =compact_subset_sub['Cylinders'].unique()\n",
        "count = compact_subset_sub['Cylinders'].value_counts()\n",
        "\n",
        "plt.bar(class_,count)\n",
        "plt.xlabel('Cylinders')\n",
        "plt.ylabel('Frequency')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T10:26:17.941958Z",
          "iopub.status.busy": "2023-08-16T10:26:17.941561Z",
          "iopub.status.idle": "2023-08-16T10:26:18.232542Z",
          "shell.execute_reply": "2023-08-16T10:26:18.231356Z",
          "shell.execute_reply.started": "2023-08-16T10:26:17.941924Z"
        },
        "id": "y9tZhVVW_Xsh",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "sns.scatterplot(x=suv_small_subset['CO2 Emissions(g/km)'], y=suv_small_subset['Fuel Consumption City (L/100 km)'], color='olive', marker='o')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T10:29:17.780545Z",
          "iopub.status.busy": "2023-08-16T10:29:17.780162Z",
          "iopub.status.idle": "2023-08-16T10:29:18.096581Z",
          "shell.execute_reply": "2023-08-16T10:29:18.095452Z",
          "shell.execute_reply.started": "2023-08-16T10:29:17.780515Z"
        },
        "id": "CfysxLxQ_Xsh",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "sns.scatterplot(x=midsize_subset['CO2 Emissions(g/km)'], y=midsize_subset['Fuel Consumption City (L/100 km)'], color='green', marker='o')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_kg_hide-input": false,
        "_kg_hide-output": true,
        "execution": {
          "iopub.execute_input": "2023-08-16T10:29:23.295119Z",
          "iopub.status.busy": "2023-08-16T10:29:23.294752Z",
          "iopub.status.idle": "2023-08-16T10:29:23.598021Z",
          "shell.execute_reply": "2023-08-16T10:29:23.59665Z",
          "shell.execute_reply.started": "2023-08-16T10:29:23.295088Z"
        },
        "id": "4EQcnUhp_Xsi",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "sns.scatterplot(x=twoseater_subset['CO2 Emissions(g/km)'], y=twoseater_subset['Fuel Consumption City (L/100 km)'], color='red', marker='o')"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [
        {
          "datasetId": 3517447,
          "sourceId": 6134482,
          "sourceType": "datasetVersion"
        }
      ],
      "dockerImageVersionId": 30527,
      "isGpuEnabled": false,
      "isInternetEnabled": true,
      "language": "python",
      "sourceType": "notebook"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.4"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
